import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import os
import threading
import tempfile
from pathlib import Path
import numpy as np
import soundfile as sf
import librosa
import torch
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import pyaudio
import wave
import time
import pyttsx3
import platform

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è PyTorch 2.6 - –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã
try:
    from torch.serialization import add_safe_globals
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è XTTS v2
    safe_classes = []
    
    try:
        from TTS.tts.configs.xtts_config import XttsConfig
        safe_classes.append(XttsConfig)
    except: pass
    
    try:
        from TTS.tts.models.xtts import XttsAudioConfig
        safe_classes.append(XttsAudioConfig)
    except: pass
    
    try:
        from TTS.tts.models.xtts import XttsArgs
        safe_classes.append(XttsArgs)
    except: pass
    
    try:
        from TTS.config.shared_configs import BaseDatasetConfig
        safe_classes.append(BaseDatasetConfig)
    except: pass
    
    try:
        from TTS.tts.configs.shared_configs import CharactersConfig
        safe_classes.append(CharactersConfig)
    except: pass
    
    try:
        from TTS.vocoder.configs.hifigan_config import HifiganConfig
        safe_classes.append(HifiganConfig)
    except: pass
    
    if safe_classes:
        add_safe_globals(safe_classes)
        print(f"‚úÖ PyTorch 2.6 safe globals –¥–æ–±–∞–≤–ª–µ–Ω—ã: {len(safe_classes)} –∫–ª–∞—Å—Å–æ–≤")
    else:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª–∞—Å—Å—ã –¥–ª—è safe globals")
        
except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è safe globals: {e}")
    pass

from TTS.api import TTS

class VoiceClonerXTTSApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ì–æ–ª–æ—Å–∞ - XTTS v2 + Windows TTS")
        self.root.geometry("1200x1000")
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.voice_file_path = tk.StringVar()
        self.output_path = tk.StringVar()
        self.standard_output_path = tk.StringVar()
        self.xtts_model = None  # XTTS v2 –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.windows_tts = None  # –°–∏—Å—Ç–µ–º–Ω—ã–π TTS Windows
        self.is_processing = False
        self.is_recording = False
        self.recording_thread = None
        
        # –ê—É–¥–∏–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - —É–ª—É—á—à–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
        self.CHUNK = 2048  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        self.FORMAT = pyaudio.paFloat32  # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–º–µ—Å—Ç–æ Int16
        self.CHANNELS = 1
        self.RATE = 48000  # –£–≤–µ–ª–∏—á–∏–ª–∏ —á–∞—Å—Ç–æ—Ç—É –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ª—É—á—à–∏—Ö –≤—ã—Å–æ–∫–∏—Ö —á–∞—Å—Ç–æ—Ç
        self.audio = pyaudio.PyAudio()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
        self.init_models()
        
    def create_widgets(self):
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ì–æ–ª–æ—Å–∞ - XTTS v2 + Windows TTS", 
                               font=("Arial", 18, "bold"))
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏
        info_label = ttk.Label(main_frame, text="XTTS v2 (–∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ + —Ä—É—Å—Å–∫–∏–π) + –°–∏—Å—Ç–µ–º–Ω—ã–π TTS Windows", 
                              font=("Arial", 10), foreground="blue")
        info_label.grid(row=1, column=0, columnspan=3, pady=(0, 20))
        
        # –í–∞–∂–Ω–æ–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
        note_label = ttk.Label(main_frame, 
                              text="üá∑üá∫ –†–£–°–°–ö–ò–ô TTS: XTTS v2 —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–∞ + Windows TTS –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è", 
                              font=("Arial", 10, "bold"), foreground="green")
        note_label.grid(row=2, column=0, columnspan=3, pady=(0, 20))
        
        # –°–µ–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–∞
        recording_frame = ttk.LabelFrame(main_frame, text="–ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞ —á–µ—Ä–µ–∑ –º–∏–∫—Ä–æ—Ñ–æ–Ω", padding="10")
        recording_frame.grid(row=3, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 20))
        recording_frame.columnconfigure(1, weight=1)
        
        # –ö–Ω–æ–ø–∫–∏ –∑–∞–ø–∏—Å–∏
        ttk.Label(recording_frame, text="–ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞:").grid(row=0, column=0, sticky=tk.W, pady=5)
        
        button_frame = ttk.Frame(recording_frame)
        button_frame.grid(row=0, column=1, columnspan=2, sticky=(tk.W, tk.E), pady=5)
        
        self.record_button = ttk.Button(button_frame, text="üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å", 
                                       command=self.start_recording, style="Accent.TButton")
        self.record_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.stop_button = ttk.Button(button_frame, text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", 
                                     command=self.stop_recording, state="disabled")
        self.stop_button.pack(side=tk.LEFT, padx=(0, 10))
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏
        self.recording_indicator = ttk.Label(button_frame, text="", font=("Arial", 12))
        self.recording_indicator.pack(side=tk.LEFT, padx=(10, 0))
        
        # –¢–∞–π–º–µ—Ä –∑–∞–ø–∏—Å–∏
        self.recording_timer = tk.StringVar(value="00:00")
        ttk.Label(button_frame, textvariable=self.recording_timer, 
                 font=("Arial", 12, "bold")).pack(side=tk.LEFT, padx=(10, 0))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏
        recording_info = """üé§ –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ó–ê–ü–ò–°–ò –í–´–°–û–ö–û–ì–û –ö–ê–ß–ï–°–¢–í–ê:
 ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –º–∏–∫—Ä–æ—Ñ–æ–Ω (–Ω–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π)
 ‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω
 ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 60-120 —Å–µ–∫—É–Ω–¥ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–π —Ä–µ—á–∏
 ‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ —à—É–º–∞ –∏ —ç—Ö–∞
 ‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç–µ –∏–º–µ–Ω–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
 ‚Ä¢ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: 10-20 —Å–º
 ‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç–µ —Å –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –≥—Ä–æ–º–∫–æ—Å—Ç—å—é"""
        
        ttk.Label(recording_frame, text=recording_info, 
                 font=("Arial", 9), foreground="gray", justify=tk.LEFT).grid(
            row=1, column=0, columnspan=3, sticky=tk.W, pady=(10, 0))
        
        # –°–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        file_frame = ttk.LabelFrame(main_frame, text="üéµ –ó–ê–ì–†–£–ó–ò–¢–¨ –ì–û–¢–û–í–´–ô –§–ê–ô–õ –° –ì–û–õ–û–°–û–ú", padding="15")
        file_frame.grid(row=4, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 20))
        file_frame.columnconfigure(1, weight=1)
        
        # –ë–û–õ–¨–®–ê–Ø –ó–ê–ú–ï–¢–ù–ê–Ø –ö–ù–û–ü–ö–ê –°–í–ï–†–•–£!
        big_button = tk.Button(file_frame, text="üìÅ –í–´–ë–†–ê–¢–¨ –§–ê–ô–õ –° –ì–û–õ–û–°–û–ú", 
                              command=self.select_voice_file, 
                              bg="red", fg="white", font=("Arial", 16, "bold"),
                              relief=tk.RAISED, bd=5, height=2, width=25)
        big_button.grid(row=0, column=0, columnspan=3, pady=10)
        
        # –ü–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        ttk.Label(file_frame, text="–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª:").grid(row=1, column=0, sticky=tk.W, pady=5)
        
        file_display_frame = ttk.Frame(file_frame)
        file_display_frame.grid(row=1, column=1, columnspan=2, sticky=(tk.W, tk.E), pady=5)
        file_display_frame.columnconfigure(0, weight=1)
        
        ttk.Entry(file_display_frame, textvariable=self.voice_file_path, state="readonly").grid(
            row=0, column=0, sticky=(tk.W, tk.E), padx=(0, 5))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        ttk.Label(file_frame, text="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: WAV, MP3, FLAC, M4A", 
                 font=("Arial", 10), foreground="blue").grid(row=2, column=0, columnspan=3, 
                                                          sticky=tk.W, pady=(10, 0))
        
        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ö–ù–û–ü–ö–ê –í–´–ë–û–†–ê –§–ê–ô–õ–ê - –ù–ê–î –¢–ï–ö–°–¢–û–ú!
        extra_file_button = tk.Button(main_frame, text="üî• –ó–ê–ì–†–£–ó–ò–¢–¨ –§–ê–ô–õ –° –ì–û–õ–û–°–û–ú üî•", 
                                     command=self.select_voice_file, 
                                     bg="orange", fg="black", font=("Arial", 14, "bold"),
                                     relief=tk.RAISED, bd=4, height=2)
        extra_file_button.grid(row=5, column=0, columnspan=3, pady=10)
        
        # –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏
        ttk.Label(main_frame, text="–¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏:").grid(
            row=6, column=0, sticky=tk.W, pady=(20, 5))
        
        self.text_input = scrolledtext.ScrolledText(main_frame, height=6, width=80)
        self.text_input.grid(row=6, column=1, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S), 
                             pady=5)
        
        # –ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
        example_text = """–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–∑–≤—É—á–∫–∏ –≤–∞—à–∏–º –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º. 
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç XTTS v2 –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.
–í—ã –º–æ–∂–µ—Ç–µ –≤—Å—Ç–∞–≤–∏—Ç—å –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏ –æ–Ω –±—É–¥–µ—Ç –æ–∑–≤—É—á–µ–Ω –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ.
–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π —Ä—É—Å—Å–∫–∏–π TTS —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–∞!"""
        self.text_input.insert(tk.END, example_text)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_frame = ttk.LabelFrame(main_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", padding="10")
        settings_frame.grid(row=7, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=20)
        settings_frame.columnconfigure(1, weight=1)
        
        # –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏
        ttk.Label(settings_frame, text="–°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏:").grid(row=0, column=0, sticky=tk.W)
        self.speed_var = tk.DoubleVar(value=0.8)
        speed_scale = ttk.Scale(settings_frame, from_=0.2, to=1.0, 
                               variable=self.speed_var, orient=tk.HORIZONTAL)
        speed_scale.grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(10, 0))
        speed_label = ttk.Label(settings_frame, text="0.8")
        speed_label.grid(row=0, column=2)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–µ–π–±–ª–∞
        speed_scale.configure(command=lambda x: speed_label.configure(text=f"{float(x):.1f}"))
        
        # –ö–Ω–æ–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=8, column=0, columnspan=3, pady=20)
        
        self.process_button = ttk.Button(button_frame, text="üéØ XTTS v2 –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å", 
                                        command=self.process_text, style="Accent.TButton")
        self.process_button.pack(side=tk.LEFT, padx=(0, 10))
        
        self.standard_button = ttk.Button(button_frame, text="üá∑üá∫ Windows TTS –≥–æ–ª–æ—Å", 
                                         command=self.generate_windows_voice)
        self.standard_button.pack(side=tk.LEFT, padx=(0, 10))
        
        # –î—É–±–ª–∏—Ä—É—é—â–∞—è –∫–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        duplicate_file_button = ttk.Button(button_frame, text="üìÅ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª", 
                                          command=self.select_voice_file, style="Accent.TButton")
        duplicate_file_button.pack(side=tk.LEFT, padx=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        playback_frame = ttk.LabelFrame(main_frame, text="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ", padding="10")
        playback_frame.grid(row=10, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=20)
        playback_frame.columnconfigure(1, weight=1)
        
        # XTTS v2 –≥–æ–ª–æ—Å
        ttk.Label(playback_frame, text="XTTS v2 –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å:").grid(row=0, column=0, sticky=tk.W, pady=5)
        cloned_buttons = ttk.Frame(playback_frame)
        cloned_buttons.grid(row=0, column=1, sticky=(tk.W, tk.E), pady=5)
        
        ttk.Button(cloned_buttons, text="‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏", 
                   command=self.play_cloned_audio).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(cloned_buttons, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                   command=self.save_cloned_audio).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(cloned_buttons, text="üìä –°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–∞", 
                   command=self.show_cloned_spectrogram).pack(side=tk.LEFT)
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≥–æ–ª–æ—Å
        ttk.Label(playback_frame, text="Windows TTS –≥–æ–ª–æ—Å:").grid(row=1, column=0, sticky=tk.W, pady=5)
        standard_buttons = ttk.Frame(playback_frame)
        standard_buttons.grid(row=1, column=1, sticky=(tk.W, tk.E), pady=5)
        
        ttk.Button(standard_buttons, text="‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏", 
                   command=self.play_standard_audio).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(standard_buttons, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                   command=self.save_standard_audio).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(standard_buttons, text="üìä –°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–∞", 
                   command=self.show_standard_spectrogram).pack(side=tk.LEFT)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        self.progress_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        ttk.Label(main_frame, textvariable=self.progress_var).grid(
            row=11, column=0, columnspan=3, pady=10)
        
        self.progress_bar = ttk.Progressbar(main_frame, mode='indeterminate')
        self.progress_bar.grid(row=12, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=5)
        
        # –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π
        self.model_status = tk.StringVar(value="–°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π: –ó–∞–≥—Ä—É–∑–∫–∞...")
        ttk.Label(main_frame, textvariable=self.model_status, 
                 font=("Arial", 9), foreground="green").grid(
            row=13, column=0, columnspan=3, pady=5)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ –¥–ª—è —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        main_frame.rowconfigure(5, weight=1)
    
    def init_models(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π TTS"""
        try:
            self.progress_var.set("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π...")
            self.root.update()
            
            # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å XTTS v2 –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            self.progress_var.set("–ó–∞–≥—Ä—É–∑–∫–∞ XTTS v2 –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
            self.root.update()
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è PyTorch 2.6
            try:
                from torch.serialization import add_safe_globals
                from TTS.tts.configs.xtts_config import XttsConfig
                from TTS.tts.models.xtts import XttsAudioConfig
                from TTS.tts.models.xtts import XttsArgs
                from TTS.config.shared_configs import BaseDatasetConfig
                add_safe_globals([XttsConfig, XttsAudioConfig, XttsArgs, BaseDatasetConfig])
                print("‚úÖ PyTorch 2.6 safe globals –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ init_models (–≤–∫–ª—é—á–∞—è XttsArgs)")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è safe globals –≤ init_models: {e}")
                pass
            
            try:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ XTTS v2 - –æ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫!
                self.xtts_model = TTS("tts_models/multilingual/multi-dataset/xtts_v2")
                if self.xtts_model is None:
                    raise Exception("XTTS v2 –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
                supported_langs = getattr(self.xtts_model, 'languages', [])
                print(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏ XTTS v2: {supported_langs}")
                
                # XTTS v2 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫!
                if 'ru' in supported_langs:
                    xtts_status = "‚úÖ XTTS v2 –∑–∞–≥—Ä—É–∂–µ–Ω–∞ - –†–£–°–°–ö–ò–ô –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø!"
                else:
                    xtts_status = "‚ö†Ô∏è XTTS v2 –∑–∞–≥—Ä—É–∂–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä—É—Å—Å–∫–æ–≥–æ..."
            except Exception as e:
                print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: XTTS v2 –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è: {e}")
                self.xtts_model = None
                xtts_status = "‚ùå XTTS v2 –ù–ï –ó–ê–ì–†–£–ñ–ï–ù–ê - —Ä—É—Å—Å–∫–æ–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!"
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                error_msg = str(e)
                self.root.after(0, lambda: messagebox.showerror(
                    "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", 
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å XTTS v2 –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!\n\n"
                    f"–û—à–∏–±–∫–∞: {error_msg}\n\n"
                    f"–ë–µ–∑ XTTS v2 –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.\n"
                    f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É."
                ))
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π TTS Windows
            self.progress_var.set("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Windows TTS...")
            self.root.update()
            try:
                self.windows_tts = pyttsx3.init()
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞
                voices = self.windows_tts.getProperty('voices')
                russian_voice = None
                
                # –ò—â–µ–º —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å
                for voice in voices:
                    if 'russian' in voice.name.lower() or 'ru' in voice.id.lower():
                        russian_voice = voice
                        break
                
                if russian_voice:
                    self.windows_tts.setProperty('voice', russian_voice.id)
                    windows_status = f"‚úÖ Windows TTS —Å —Ä—É—Å—Å–∫–∏–º –≥–æ–ª–æ—Å–æ–º: {russian_voice.name}"
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≥–æ–ª–æ—Å
                    if voices:
                        self.windows_tts.setProperty('voice', voices[0].id)
                        windows_status = f"‚úÖ Windows TTS: {voices[0].name}"
                    else:
                        windows_status = "‚ö†Ô∏è Windows TTS: –≥–æ–ª–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                        
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ Windows TTS: {e}")
                windows_status = "‚ùå Windows TTS: –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"
            
            self.model_status.set(f"–°—Ç–∞—Ç—É—Å: {xtts_status} | {windows_status}")
            self.progress_var.set("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            
        except Exception as e:
            error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏: {str(e)}"
            messagebox.showerror("–û—à–∏–±–∫–∞", error_msg)
            self.progress_var.set("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π")
            self.model_status.set("–°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π: ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
    
    def start_recording(self):
        """–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –º–∏–∫—Ä–æ—Ñ–æ–Ω"""
        if self.is_recording:
            return
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏
            self.recorded_file = tempfile.NamedTemporaryFile(suffix=".wav", delete=False)
            self.recorded_file_path = self.recorded_file.name
            self.recorded_file.close()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–ø–∏—Å–∏
            self.frames = []
            self.stream = self.audio.open(
                format=self.FORMAT,
                channels=self.CHANNELS,
                rate=self.RATE,
                input=True,
                frames_per_buffer=self.CHUNK
            )
            
            self.is_recording = True
            self.record_start_time = time.time()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            self.record_button.config(state="disabled")
            self.stop_button.config(state="normal")
            self.recording_indicator.config(text="üî¥", foreground="red")
            
            # –ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.recording_thread = threading.Thread(target=self._record_audio)
            self.recording_thread.daemon = True
            self.recording_thread.start()
            
            # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
            self.update_timer()
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å: {str(e)}")
    
    def _record_audio(self):
        """–ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            while self.is_recording:
                data = self.stream.read(self.CHUNK)
                self.frames.append(data)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
        finally:
            if hasattr(self, 'stream'):
                self.stream.stop_stream()
                self.stream.close()
    
    def update_timer(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –∑–∞–ø–∏—Å–∏"""
        if self.is_recording:
            elapsed = int(time.time() - self.record_start_time)
            minutes = elapsed // 60
            seconds = elapsed % 60
            self.recording_timer.set(f"{minutes:02d}:{seconds:02d}")
            self.root.after(1000, self.update_timer)
    
    def stop_recording(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"""
        if not self.is_recording:
            return
        
        self.is_recording = False
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
        if self.recording_thread:
            self.recording_thread.join()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
        try:
            with wave.open(self.recorded_file_path, 'wb') as wf:
                wf.setnchannels(self.CHANNELS)
                wf.setsampwidth(self.audio.get_sample_size(self.FORMAT))
                wf.setframerate(self.RATE)
                wf.writeframes(b''.join(self.frames))
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Ç–∏ –∫ –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
            self.voice_file_path.set(self.recorded_file_path)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            duration = len(self.frames) * self.CHUNK / self.RATE
            if duration < 5:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                                     f"–ó–∞–ø–∏—Å—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è ({duration:.1f} —Å–µ–∫). "
                                     "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥.")
            elif duration > 300:
                messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                                     f"–ó–∞–ø–∏—Å—å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–∞—è ({duration:.1f} —Å–µ–∫). "
                                     "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 1-2 –º–∏–Ω—É—Ç—ã.")
            else:
                messagebox.showinfo("–£—Å–ø–µ—Ö", 
                                   f"–ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ({duration:.1f} —Å–µ–∫). "
                                   "–ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å: {str(e)}")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.record_button.config(state="normal")
        self.stop_button.config(state="disabled")
        self.recording_indicator.config(text="", foreground="black")
        self.recording_timer.set("00:00")
    
    def select_voice_file(self):
        """–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ —Å –≥–æ–ª–æ—Å–æ–º"""
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å –≤–∞—à–∏–º –≥–æ–ª–æ—Å–æ–º",
            filetypes=[
                ("–ê—É–¥–∏–æ —Ñ–∞–π–ª—ã", "*.wav *.mp3 *.flac *.m4a"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ]
        )
        if file_path:
            self.voice_file_path.set(file_path)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞
            try:
                y, sr = librosa.load(file_path)
                duration = len(y) / sr
                if duration < 10:
                    messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                                         f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ({duration:.1f} —Å–µ–∫). "
                                         "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.")
                elif duration > 300:
                    messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                                         f"–§–∞–π–ª –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π ({duration:.1f} —Å–µ–∫). "
                                         "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 1-2 –º–∏–Ω—É—Ç—ã –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.")
                else:
                    messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", 
                                       f"–§–∞–π–ª –ø–æ–¥—Ö–æ–¥—è—â–µ–π –¥–ª–∏–Ω—ã ({duration:.1f} —Å–µ–∫). "
                                       "–ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞: {e}")
    
    def process_text(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∞—É–¥–∏–æ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–∞ —á–µ—Ä–µ–∑ XTTS v2"""
        if self.is_processing:
            return
        
        if not self.voice_file_path.get():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –≤–∞—à–∏–º –≥–æ–ª–æ—Å–æ–º!")
            return
        
        text = self.text_input.get("1.0", tk.END).strip()
        if not text:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏!")
            return
        
        # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.is_processing = True
        self.process_button.config(state="disabled")
        self.progress_bar.start()
        
        thread = threading.Thread(target=self._process_text_thread, args=(text,))
        thread.daemon = True
        thread.start()
    
    def split_text_for_xtts(self, text, max_length=150):
        """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è XTTS v2"""
        import re
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–ø–æ —Ç–æ—á–∫–∞–º, –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º, –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –∑–Ω–∞–∫–∞–º –∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫)
        sentences = re.split(r'[.!?\n]+', text)
        chunks = []
        
        for sentence in sentences:
            sentence = sentence.strip()
            if not sentence:
                continue
            
            # –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            if len(sentence) <= max_length:
                chunks.append(sentence)
                continue
            
            # –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
            chunks.extend(self._split_long_sentence(sentence, max_length))
        
        return chunks
    
    def _split_long_sentence(self, sentence, max_length):
        """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π"""
        import re
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π: –∑–∞–ø—è—Ç—ã–µ –∏ —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π -> —Ç–∏—Ä–µ -> –¥–≤–æ–µ—Ç–æ—á–∏–µ -> –ø—Ä–æ–±–µ–ª—ã
        separators = [
            r'[,;]',      # –ó–∞–ø—è—Ç—ã–µ –∏ —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π
            r'\s+-\s+',   # –¢–∏—Ä–µ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
            r':',         # –î–≤–æ–µ—Ç–æ—á–∏–µ
            r'\s+'        # –õ—é–±—ã–µ –ø—Ä–æ–±–µ–ª—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π)
        ]
        
        for i, separator in enumerate(separators):
            parts = re.split(separator, sentence)
            
            # –ï—Å–ª–∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –¥–∞–ª–æ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —á–∞—Å—Ç–∏
            if len(parts) > 1:
                result_chunks = []
                current_part = ""
                
                for part in parts:
                    part = part.strip()
                    if not part:
                        continue
                    
                    # –ï—Å–ª–∏ —á–∞—Å—Ç—å —Å–∞–º–∞ –ø–æ —Å–µ–±–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è
                    if len(part) > max_length:
                        # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—É—é —á–∞—Å—Ç—å
                        if current_part:
                            result_chunks.append(current_part.strip())
                            current_part = ""
                        
                        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (–ø—Ä–æ–±–µ–ª—ã), —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞
                        if i == len(separators) - 1:
                            words = part.split()
                            temp_chunk = ""
                            
                            for word in words:
                                if len(temp_chunk + " " + word) <= max_length:
                                    temp_chunk += (" " + word) if temp_chunk else word
                                else:
                                    if temp_chunk:
                                        result_chunks.append(temp_chunk.strip())
                                    temp_chunk = word
                            
                            if temp_chunk:
                                current_part = temp_chunk
                        else:
                            # –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è —ç—Ç–æ–π —á–∞—Å—Ç–∏
                            sub_chunks = self._split_long_sentence(part, max_length)
                            if len(sub_chunks) > 1:
                                # –ï—Å–ª–∏ –ø–æ–¥—Ä–∞–∑–±–∏–µ–Ω–∏–µ —É–¥–∞–ª–æ—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
                                if current_part:
                                    result_chunks.append(current_part.strip())
                                    current_part = ""
                                result_chunks.extend(sub_chunks)
                            else:
                                # –ï—Å–ª–∏ –ø–æ–¥—Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                                if current_part:
                                    result_chunks.append(current_part.strip())
                                    current_part = ""
                                result_chunks.append(part)
                    else:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ —á–∞—Å—Ç—å –≤ —Ç–µ–∫—É—â–∏–π —á–∞–Ω–∫
                        if len(current_part + " " + part) <= max_length:
                            current_part += (" " + part) if current_part else part
                        else:
                            if current_part:
                                result_chunks.append(current_part.strip())
                            current_part = part
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
                if current_part:
                    result_chunks.append(current_part.strip())
                
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞–∑–±–∏–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if len(result_chunks) > 1:
                    return result_chunks
        
        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –Ω–µ –ø–æ–º–æ–≥, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∫ –µ—Å—Ç—å
        return [sentence]

    def _process_text_thread(self, text):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —á–µ—Ä–µ–∑ XTTS v2"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å
            if self.xtts_model is None:
                raise Exception("–ú–æ–¥–µ–ª—å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É.")
            
            self.root.after(0, lambda: self.progress_var.set("–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –≥–æ–ª–æ—Å–∞..."))
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            text_chunks = self.split_text_for_xtts(text)
            print(f"üìù –¢–µ–∫—Å—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ {len(text_chunks)} —á–∞—Å—Ç–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            if len(text_chunks) > 1:
                self.root.after(0, lambda: self.progress_var.set(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ({len(text_chunks)} —á–∞—Å—Ç–µ–π)..."))
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ WAV —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏
            with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as final_file:
                output_path = final_file.name
            
            import soundfile as sf
            import numpy as np
            
            # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
            all_audio_data = []
            sample_rate = None
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π –º–∞—Å—Å–∏–≤
            for i, chunk in enumerate(text_chunks):
                if len(text_chunks) > 1:
                    self.root.after(0, lambda i=i, total=len(text_chunks): 
                        self.progress_var.set(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∞—Å—Ç–∏ {i+1} –∏–∑ {total}..."))
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è —á–∞—Å—Ç–∏
                with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as tmp_file:
                    chunk_output_path = tmp_file.name
                
                # XTTS v2 —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                try:
                    self.xtts_model.tts_to_file(
                        text=chunk,
                        speaker_wav=self.voice_file_path.get(),
                        file_path=chunk_output_path,
                        language="ru",
                        # –¢–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                        speed=1.0,
                        temperature=0.7,
                        length_penalty=1.0,
                        repetition_penalty=2.0,
                        top_k=50,
                        top_p=0.85
                    )
                    
                    # –ß–∏—Ç–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —á–∞—Å—Ç—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π –º–∞—Å—Å–∏–≤
                    audio_data, sr = sf.read(chunk_output_path)
                    if sample_rate is None:
                        sample_rate = sr
                    all_audio_data.append(audio_data)
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —á–∞—Å—Ç–∏
                    try:
                        os.unlink(chunk_output_path)
                    except:
                        pass
                    
                    print(f"‚úÖ –ß–∞—Å—Ç—å {i+1} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ–±—â–∏–π —Ñ–∞–π–ª")
                    
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Å —á–∞—Å—Ç—å—é {i+1}: {e}")
                    # –ü—Ä–æ–±—É–µ–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                    try:
                        self.xtts_model.tts_to_file(
                            text=chunk,
                            speaker_wav=self.voice_file_path.get(),
                            file_path=chunk_output_path,
                            language="ru"
                        )
                        
                        # –ß–∏—Ç–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —á–∞—Å—Ç—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π –º–∞—Å—Å–∏–≤
                        audio_data, sr = sf.read(chunk_output_path)
                        if sample_rate is None:
                            sample_rate = sr
                        all_audio_data.append(audio_data)
                        
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —á–∞—Å—Ç–∏
                        try:
                            os.unlink(chunk_output_path)
                        except:
                            pass
                        
                        print(f"‚úÖ –ß–∞—Å—Ç—å {i+1} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
                    except Exception as e2:
                        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç—å {i+1}: {e2}")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª
            if len(all_audio_data) > 1:
                self.root.after(0, lambda: self.progress_var.set("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ..."))
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
                final_audio = np.concatenate(all_audio_data)
                sf.write(output_path, final_audio, sample_rate)
                
                print(f"‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ {len(all_audio_data)} —á–∞—Å—Ç–µ–π –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª")
                
            else:
                # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —á–∞—Å—Ç—å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë –∫–∞–∫ –µ—Å—Ç—å
                sf.write(output_path, all_audio_data[0], sample_rate)
                print("‚úÖ –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            self.output_path.set(output_path)
            
            self.root.after(0, lambda: self.progress_var.set("–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"))
            
        except Exception as e:
            error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å: {str(e)}"
            self.root.after(0, lambda: self.progress_var.set(f"–û—à–∏–±–∫–∞: {str(e)}"))
            self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", error_msg))
        
        finally:
            self.root.after(0, lambda: self._finish_processing())
    
    def _finish_processing(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        self.is_processing = False
        self.progress_bar.stop()
        self.process_button.config(state="normal")
    
    def generate_windows_voice(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Windows TTS –≥–æ–ª–æ—Å–∞"""
        if self.is_processing:
            return
        
        text = self.text_input.get("1.0", tk.END).strip()
        if not text:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏!")
            return
        
        # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.is_processing = True
        self.standard_button.config(state="disabled")
        self.progress_bar.start()
        
        thread = threading.Thread(target=self._generate_windows_thread, args=(text,))
        thread.daemon = True
        thread.start()
    
    def _generate_windows_thread(self, text):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Windows TTS –≥–æ–ª–æ—Å–∞"""
        try:
            self.root.after(0, lambda: self.progress_var.set("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Windows TTS –≥–æ–ª–æ—Å–∞..."))
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as tmp_file:
                output_path = tmp_file.name
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Windows TTS
            self.windows_tts.setProperty('rate', int(150 * self.speed_var.get()))
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
            self.windows_tts.save_to_file(text, output_path)
            self.windows_tts.runAndWait()
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            self.standard_output_path.set(output_path)
            
            self.root.after(0, lambda: self.progress_var.set("Windows TTS –≥–æ–ª–æ—Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!"))
            
        except Exception as e:
            error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Windows TTS –≥–æ–ª–æ—Å: {str(e)}"
            self.root.after(0, lambda: self.progress_var.set(f"–û—à–∏–±–∫–∞: {str(e)}"))
            self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", error_msg))
        
        finally:
            self.root.after(0, lambda: self._finish_windows_processing())
    
    def _finish_windows_processing(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Windows TTS –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        self.is_processing = False
        self.progress_bar.stop()
        self.standard_button.config(state="normal")
    
    def play_cloned_audio(self):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ"""
        if not self.output_path.get():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∫–ª–æ–Ω–∏—Ä—É–π—Ç–µ –≥–æ–ª–æ—Å!")
            return
        
        try:
            import subprocess
            import platform
            
            if platform.system() == "Windows":
                os.startfile(self.output_path.get())
            elif platform.system() == "Darwin":  # macOS
                subprocess.run(["open", self.output_path.get()])
            else:  # Linux
                subprocess.run(["xdg-open", self.output_path.get()])
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ: {str(e)}")
    
    def play_standard_audio(self):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∞—É–¥–∏–æ"""
        if not self.standard_output_path.get():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ Windows TTS –≥–æ–ª–æ—Å!")
            return
        
        try:
            import subprocess
            import platform
            
            if platform.system() == "Windows":
                os.startfile(self.standard_output_path.get())
            elif platform.system() == "Darwin":  # macOS
                subprocess.run(["open", self.standard_output_path.get()])
            else:  # Linux
                subprocess.run(["xdg-open", self.standard_output_path.get()])
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ: {str(e)}")
    
    def save_cloned_audio(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞"""
        if not self.output_path.get():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∫–ª–æ–Ω–∏—Ä—É–π—Ç–µ –≥–æ–ª–æ—Å!")
            return
        
        save_path = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å XTTS v2 –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª",
            defaultextension=".wav",
            filetypes=[
                ("WAV —Ñ–∞–π–ª—ã", "*.wav"),
                ("MP3 —Ñ–∞–π–ª—ã", "*.mp3"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ]
        )
        
        if save_path:
            try:
                import shutil
                shutil.copy2(self.output_path.get(), save_path)
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"XTTS v2 –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {save_path}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {str(e)}")
    
    def save_standard_audio(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞"""
        if not self.standard_output_path.get():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ Windows TTS –≥–æ–ª–æ—Å!")
            return
        
        save_path = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å Windows TTS –∞—É–¥–∏–æ —Ñ–∞–π–ª",
            defaultextension=".wav",
            filetypes=[
                ("WAV —Ñ–∞–π–ª—ã", "*.wav"),
                ("MP3 —Ñ–∞–π–ª—ã", "*.mp3"),
                ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")
            ]
        )
        
        if save_path:
            try:
                import shutil
                shutil.copy2(self.standard_output_path.get(), save_path)
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"Windows TTS –∞—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {save_path}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {str(e)}")
    
    def show_cloned_spectrogram(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—É –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ"""
        if not self.output_path.get():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∫–ª–æ–Ω–∏—Ä—É–π—Ç–µ –≥–æ–ª–æ—Å!")
            return
        
        self._show_spectrogram(self.output_path.get(), "XTTS v2 –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å")
    
    def show_standard_spectrogram(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∞—É–¥–∏–æ"""
        if not self.standard_output_path.get():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ Windows TTS –≥–æ–ª–æ—Å!")
            return
        
        self._show_spectrogram(self.standard_output_path.get(), "Windows TTS –≥–æ–ª–æ—Å")
    
    def _show_spectrogram(self, audio_path, title):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—É –∞—É–¥–∏–æ"""
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ
            y, sr = librosa.load(audio_path)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã
            D = librosa.amplitude_to_db(np.abs(librosa.stft(y)), ref=np.max)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
            spectrogram_window = tk.Toplevel(self.root)
            spectrogram_window.title(f"–°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–∞ - {title}")
            spectrogram_window.geometry("900x600")
            
            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))
            
            # –°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–∞
            img = librosa.display.specshow(D, y_axis='linear', x_axis='time', sr=sr, ax=ax1)
            ax1.set_title(f'–°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–∞ - {title}')
            fig.colorbar(img, ax=ax1, format="%+2.f dB")
            
            # –í–æ–ª–Ω–æ–≤–∞—è —Ñ–æ—Ä–º–∞
            librosa.display.waveshow(y, sr=sr, ax=ax2)
            ax2.set_title('–í–æ–ª–Ω–æ–≤–∞—è —Ñ–æ—Ä–º–∞')
            ax2.set_xlabel('–í—Ä–µ–º—è (—Å–µ–∫—É–Ω–¥—ã)')
            ax2.set_ylabel('–ê–º–ø–ª–∏—Ç—É–¥–∞')
            
            plt.tight_layout()
            
            canvas = FigureCanvasTkAgg(fig, spectrogram_window)
            canvas.draw()
            canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—É: {str(e)}")
    
    def __del__(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if hasattr(self, 'audio'):
            self.audio.terminate()

def main():
    root = tk.Tk()
    app = VoiceClonerXTTSApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
